{"/home/travis/build/npmtest/node-npmtest-node-mariadb/test.js":"/* istanbul instrument in package npmtest_node_mariadb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-mariadb/lib.npmtest_node_mariadb.js":"/* istanbul instrument in package npmtest_node_mariadb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_mariadb = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_mariadb = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-mariadb/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-mariadb && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_mariadb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_mariadb\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_mariadb.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_mariadb.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_mariadb.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_mariadb.__dirname + '/lib.npmtest_node_mariadb.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-mariadb/node_modules/node-mariadb/index.js":"var utility = require('./lib/utility');\n\n//version\nexports.version = '0.1.1';\n\n//constants\nexports.DRIVER_TYPE_MYSQL_REGULAR_PROTOCOL = 'MysqlRegularPrtocol';\nexports.DRIVER_TYPE_HANDLER_SOCKET = 'HandlerSocket';\n\nexports.HandlerSocket = require('./lib/driver/handler_socket');\n\nexports.createConnection = function(settings){\n  if(settings === undefined){\n    settings = {};\n  }\n\n  var options = {};\n  if(typeof settings.options === 'object'){\n    options = settings.options;\n  }\n\n  if(settings.driverType === undefined){\n    settings.driverType = this.DRIVER_TYPE_MYSQL_REGULAR_PROTOCOL;\n  }\n\n  var className = settings.driverType\n    , fileName = utility.toSnakeCase(className)\n  ;\n\n  var Driver = require('./lib/driver/' + fileName);\n  var driver = new Driver(settings, options);\n\n  driver.usingAs = settings.driverType\n  \n  return driver;\n}","/home/travis/build/npmtest/node-npmtest-node-mariadb/node_modules/node-mariadb/lib/utility.js":"exports.toSnakeCase = function(str){\n    var capitalizeFirstLetter = function(str){\n     return str.charAt(0).toLowerCase() + str.slice(1);\n    };\n    var s = capitalizeFirstLetter(str);\n    var len = s.length;\n    var converted = '';\n    for(var i = 0; i < len; i++)\n    {\n        if(s[i].match(/[A-Z]/))\n        {\n            converted += '_' + s[i].toLowerCase();\n        }\n        else\n        {\n            converted += s[i];\n        }\n    }\n    return converted;\n}","/home/travis/build/npmtest/node-npmtest-node-mariadb/node_modules/node-mariadb/lib/driver/handler_socket.js":"var util = require('util')\n, EventEmitter = require('events').EventEmitter\n, Connection = require('../connection')\n, utility = require('../utility')\n;\n\nmodule.exports = HandlerSocket;\n\n//static properties\nHandlerSocket.PRIMARY = 'PRIMARY';\n\n//constants\nvar SEP = '\\t', DATA_END_LETTER = '\\n';\n\n//order definiation.\nvar orders= {\n    AUTH: 'A',\n    OPEN_INDEX: 'P',\n    FILTER: 'F',\n    WHILE: 'W',\n    IN : '@',\n    MOD: {\n        UPDATE: 'U',\n        DELETE: 'D',\n        INCREMENT: '+',\n        DECREMENT: '-',\n        UPDATE_GET: 'U?',\n        DELETE_GET: 'D?',\n        INCREMENT_GET: '+?',\n        DECREMENT_GET: '-?'\n    }\n}\n\nfunction HandlerSocket(settings, options){\n    EventEmitter.call(this);\n\n    var self = this;\n\n    if(options === undefined){\n        options = {};\n    }\n\n    this.auth = {\n        type: 1\n    };\n\n    this.enableAuthentication = false;\n\n    if(settings.auth){\n        this.enableAuthentication = true;\n        this.auth.key = settings.auth.key;\n    }\n\n    this.connection = new Connection(settings, options);\n\n    self.indexId = 0;\n\n    //request encoder for handlersocket protocol.\n    this.connection.encodeRequest = function(req){\n        return req.join(SEP) + DATA_END_LETTER;\n    }\n\n    this.connection.handleResponse = function(err, res, errMsg, cb){\n        var data = res.split(SEP).join(',').replace(/\\u0001[\\x40-\\x4F]/g, function(ch) {\n            return String.fromCharCode(ch.charCodeAt(1) - 0x40);\n        }).split(',');\n        \n        if(err || data[0] != 0){\n            err = err ? err : new Error(errMsg + ' code: ' + data.join(','));\n            cb(err, null);\n            self.emit('error', err);\n            return;\n        }\n        cb(null, data);\n    }\n\n    this.connection.onData = function(data){\n        if (data) {\n            var received = self.connection.received + data;\n            var found;\n            while ((found = received.indexOf(DATA_END_LETTER)) !== -1) {\n                var response = received.substring(0, found + 1);\n                received = received.substring(found + 1);\n                var next = self.connection.enQueue.shift();\n                next(null, response.substring(0, response.length -1));\n            }\n            self.connection.received = received;\n        }\n    };\n\n    Object.keys(this.connection._sock._events).forEach(function(evName){\n        self.connection.on(evName, function(d){\n            self.emit(evName, d);\n        });\n    });\n}\nutil.inherits(HandlerSocket, EventEmitter);\n\n//increment reference value.\nHandlerSocket.prototype._incrementIndexId = function(){\n    this.indexId++;\n}\n\nHandlerSocket.prototype._auth = function(cb){\n    var self = this;\n    if(!this.enableAuthentication){\n        cb();\n    }else{\n        var next = function(err, data){\n        self.connection.handleResponse(err, data, 'Authentication Error.'\n            ,function(err, data){\n                cb(err, data);\n            });\n        }\n        this.connection.send([orders.AUTH, this.auth.type, this.auth.key], next);\n    }\n}\n\nHandlerSocket.prototype.openIndex = function(dbName, tableName, indexName, columns, fcolumns, cb){\n    var self = this;\n    \n    if(typeof fcolumns === 'function'){\n        cb = fcolumns;\n    }\n\n    self._incrementIndexId();\n\n    var indexId = self.indexId;\n    var req = [orders.OPEN_INDEX, indexId, dbName, tableName, indexName, columns.join(',')];\n\n    if(typeof fcolumns === 'object'){\n        req.push(fcolumns.join(SEP));\n    }\n\n    var next = function(err, res){\n     self.connection.handleResponse(err, res, 'Could not open index.'\n        ,function(err, data){\n            cb(err, err ? null : new Index(self.connection, indexId, columns));\n        });\n    }\n\n    this._auth(function(){\n        self.connection.send(req, next);\n    });\n}\n\nHandlerSocket.prototype.close = function(){\n    this.connection.close();\n}\n\nIndex.DEFAULT_OPERATOR = '=';\n\nfunction Index(connection, indexId, columns){\n    this.connection = connection;\n    this.indexId = indexId;\n    this.columns = columns;\n\n    this.find = this._exec.bind(this, null);\n    this.update = this._exec.bind(this, 'UPDATE');\n    this.delete = this._exec.bind(this, 'DELETE');\n    this.increment = this._exec.bind(this, 'INCREMENT');\n    this.decrement = this._exec.bind(this, 'DECREMENT');\n    this.updateGet = this._exec.bind(this, 'UPDATE_GET');\n    this.deleteGet = this._exec.bind(this, 'DELETE_GET');\n    this.incrementGet = this._exec.bind(this, 'INCREMENT_GET');\n    this.decrementGet = this._exec.bind(this, 'DECREMENT_GET');\n}\n\nIndex.prototype.insert = function(values, cb){\n    var self = this;\n    var next = function(err, res){\n        self.connection.handleResponse(err, res, 'Insert failed.'\n        , function(err, data){\n            cb(err, err ? null : true);\n        });\n    }\n    this.connection.send([this.indexId, '+' , values.length, values.join(SEP)], next);\n}\n\nIndex.prototype._exec = function(order, values, options, cb){\n    if(typeof options === 'function'){\n        cb = options;\n        options = {};\n    }\n    if(typeof values !== 'object'){\n        cb(new Error('The argument of values should be an array.'), null);\n        return;\n    }\n\n    var operator = options.operator || Index.DEFAULT_OPERATOR;\n    var self = this;\n    var req = [this.indexId, operator].concat(_createRequest(order, values, options));\n    var columns = self.columns;\n    \n    var next = function(err, res){\n        self.connection.handleResponse(err, res, 'find failed.'\n        , function(err, data){\n            var parseDataToResults = function(){\n                if(!_isModOrder(order) || orders.MOD[order].indexOf('?') !== -1)\n                    return assignKey(columns, resultsToArray(data));\n                return parseInt(data.slice(2)[0]);\n            };\n            cb( err, err ? null : parseDataToResults());\n        });\n    }\n\n    this.connection.send(req, next);\n}\n\nfunction _createRequest(order, values, options){\n    var addReq = [];\n    var limit = options.limit || 1;\n    var offset = options.offset || 0;\n\n    if(values.in) {\n        addReq = addReq.concat([1, '', limit, offset, orders.IN, 0, values.in.length, values.in.join(SEP)]);\n    } else {\n        addReq = addReq.concat([values.length, values.join(SEP), limit, offset]);\n    }\n\n    addReq = addReq.concat(_addFilterRequest(options), _addModRequest(order, options));\n\n    return addReq;\n}\n\nfunction _addFilterRequest(options){\n    if(options.filter){\n        return [orders.FILTER, options.filter[1], options.filter[0], options.filter[2]];\n    }\n    if(options.while){\n        return [orders.WHILE, options.while[1], options.while[0], options.while[2]];\n    }\n    return [];\n}\n\nfunction _isModOrder(order){\n    return orders.MOD.hasOwnProperty(order) === true;\n}\n\nfunction _addModRequest(order, options){\n    var mv = '';\n    if(options['+']) {\n\n        mv = options['+'];\n\n    } else if (options['-']){\n\n        mv = options['-'];\n\n    } else if(options.set) {\n\n        mv = options.set.join(SEP);\n\n    }\n\n    if(_isModOrder(order)){\n        return [orders.MOD[order], mv];\n    }\n    return [];\n}\n\nfunction resultsToArray(data){\n    var vlen = parseInt(data[1])\n    , values = data.slice(2)\n    , loopCount = values.length / vlen\n    , begin = 0\n    , end = vlen\n    , returnValues = [];\n\n    for(var i =0; i < loopCount; i++){\n        returnValues.push(values.slice(begin, end));\n        begin+= vlen;\n        end+= vlen;\n    }\n\n    return returnValues;\n}\n\nfunction assignKey(keyList, data){\n    var resultSet = [];\n\n    for(var i in data){\n        for(var j in data[i]){\n            if(resultSet[i] == undefined){\n                resultSet[i] = {};\n            }\n            resultSet[i][keyList[j]] = data[i][j];\n        }\n    }\n\n    return resultSet;\n}","/home/travis/build/npmtest/node-npmtest-node-mariadb/node_modules/node-mariadb/lib/connection.js":"var util = require('util')\n, EventEmitter = require('events').EventEmitter\n, async = require('async')\n, net = require('net')\n;\n\nmodule.exports = Connection;\n\nfunction Connection(settings, options){\n    EventEmitter.call(this);\n\n    var self = this;\n\n    this.host = settings.host || 'localhost';\n    this.port = settings.port || 3306;\n    this.timeout = settings.timeout || 120;\n    this.received = '';\n    this.RETRY_CONNECT_INTERVAL = 3000;\n    this._sock = new net.Socket({ allowHalfOpen: true });\n\n    //Force set encoding as utf8\n    this._sock.setEncoding('utf8');\n    this._sock.setTimeout(this.timeout);\n    this.enQueue = [];\n\n    //connect to host:port\n    this._sock.connect(this.port, this.host);\n    this._sock.on('connect', function() {\n        self.emit('connect');\n    });\n\n    this._sock.on('close', function(err) {\n        self.emit('close', err);\n    });\n\n    this._sock.on('error', function(err) {\n        self.emit('error', err);\n    });\n\n    this._sock.on('timeout', function(err) {\n        self.emit('timeout', err);\n    });\n\n    this._sock.on('data', function(data){\n        self.onData(data);\n    });\n\n    this.onData = function(data){}\n\n    //interfaces\n    this.encodeRequest = function(req){}\n    this.handleResponse = function(err, res, costomeErrMsg, cb){}\n}\nutil.inherits(Connection, EventEmitter);\n\nConnection.prototype.send = function(req, cb){\n    if(this._sock.readyState != 'open'){\n        process.nextTick(function() {\n            cb(new Error('Can not write packet due to the socket closed.'));\n        });\n        return;\n    }\n\n    var encoded = this.encodeRequest(req);\n    var self = this;\n    self._sock.write(encoded, 'utf-8');\n    self.enQueue.push(cb);\n}\n\n/**\n* send heartbeat to the server maintain connection.\n*/\nConnection.prototype.heartbeat = function(cb){\n    var self = this;\n    this.on('error', function(err){\n        if(err.code == 'ECONNREFUSED'){\n            console.log('MariaDB server('+self.host + ':' + self.port + ') is not responding. Retry to connect....');\n            setTimeout(function(){\n                self._sock.connect(self.port, self.host);\n            }, self.RETRY_CONNECT_INTERVAL);\n        }\n    });\n}\n\nConnection.prototype.close = function(cb){\n    this._sock.end();\n}","/home/travis/build/npmtest/node-npmtest-node-mariadb/node_modules/node-mariadb/lib/connection_pool.js":"//not implemnted yet.","/home/travis/build/npmtest/node-npmtest-node-mariadb/node_modules/node-mariadb/lib/driver/mysql_regular_protocol.js":""}